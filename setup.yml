---
- name: Setup Dev Environment
  hosts: localhost
  become: false

  vars:
    home_dir: "{{ ansible_env.HOME }}"
    ssh_dir: "{{ home_dir }}/.ssh"

  tasks:
    # Update and upgrade system
    - name: Update system
      become: true
      apt:
        update_cache: yes
        upgrade: dist

    # Install essential packages
    - name: Install essential tools
      become: true
      apt:
        name:
          - git
          - stow
          - zsh
          - tmux
          - xclip
          - eza
          - curl
          - bat
          - gcc
          - clang
          - build-essential
          - libstdc++-12-dev
          - wget
        state: present

    # ---------------------------------------------
    # Nvim
    # ---------------------------------------------
    - name: download neovim binary
      get_url:
        url: "https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz"
        dest: "/tmp/nvim-linux64.tar.gz"

    - name: remove old nvim version
      file:
        path: "/opt/nvim"
        state: absent

    - name: extract neovim binary to /opt
      unarchive:
        src: "/tmp/nvim-linux64.tar.gz"
        dest: "/opt"
        remote_src: yes
    - name: symlink neovim binary to /usr/bin
      file:
        src: "/opt/nvim-linux64/bin/nvim"
        dest: "/usr/bin/nvim"
        state: link

    - name: "clean downloaded file"
      file:
        path: "/tmp/nvim-linux64.tar.gz"
        state: absent

    # ensure /root/.ssh directory exists
    - name: ensure /root/.ssh directory exists
      file:
        path: "{{ home_dir }}/.ssh"
        state: directory
        mode: '0700'

    # deploy ssh private keys
    - name: deploy ssh private keys
      copy:
        src: "ssh/{{item}}"
        dest: "{{ ssh_dir }}/{{ item | regex_replace('.enc$', '') }}"
        mode: '0600'
        decrypt: yes
      with_items:
        - id_ed25519_personal.enc
        - id_ed25519_heyday.enc
        - id_ed25519_work.enc

    # Deploy SSH public keys
    - name: Deploy SSH public keys
      copy:
        src: "ssh/{{item}}"
        dest: "{{ ssh_dir }}/{{item}}"
        mode: '0644'
      with_items:
        - id_ed25519_personal.pub
        - id_ed25519_work.pub
        - id_ed25519_heyday.pub

    # Set up SSH config
    - name: Deploy SSH Config
      copy:
        src: "ssh/config"
        dest: "{{ ssh_dir }}/config"
        mode: '0644'

    # Add Github to known_hosts
    - name: Add GitHub to known_hosts
      known_hosts:
        path: "{{ home_dir }}/.ssh/known_hosts"
        name: "github.com"
        key: "{{ lookup('pipe', 'ssh-keyscan github.com') }}"

    # Clone dotfiles repository
    - name: Clone dotfiles repository
      git:
        repo: git@github-personal:DavidRozner/dotfiles.git
        dest: "{{ home_dir }}/dotfiles"
        key_file: "{{ home_dir }}/.ssh/id_ed25519_personal"
        version: HEAD

    - name: Apply dotfiles using Stow
      shell: |
        stow zsh
        stow nvim
        stow tmux
        stow git
        stow ideavim
      args:
        chdir: "{{ home_dir }}/dotfiles"

    # ------------------------------------------
    # Rust
    # ------------------------------------------
    - name: Install rustup
      shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        creates: "{{ home_dir }}/.cargo/bin/rustup"

    - name: Install rust-analyzer
      shell: |
        source $HOME/.cargo/env && rustup component add rust-analyzer
      args:
        executable: /bin/bash


    # ------------------------------------------
    # TypeScript (typescript-language-server)
    # ------------------------------------------

    - name: Install Node.js and npm
      apt:
        name: nodejs
        state: present
      tags:
        - nodejs

    - name: Install Node.js build tools
      apt:
        name: build-essential
        state: present
      tags:
        - nodejs

    - name: Install npm ( if not included )
      apt:
        name: npm
        state: present
      tags:
        - nodejs

    - name: Install TypeScript LSP
      npm:
        name: typescript-language-server
        global: yes
      tags:
        - lsp

    - name: Install TypeScript
      npm:
        name: typescript
        global: yes
      tags:
        - lsp

    # ------------------------------------------
    # Python (pyright)
    # ------------------------------------------
    #    - name: Install Python LSP
    #      npm:
    #        name: pyright
    #        global: yes
    #      tags:
    #        - lsp

    # ------------------------------------------
    # Java (jdtls)
    # ------------------------------------------
    #    - name: Install Java LSP (jdtls)
    #      shell: |
    #        curl -L -o /tmp/jdtls.tar.gz https://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz
    #        mkdir -p ~/.local/share/jdtls
    #        tar -xzf /tmp/jdtls.tar.gz -C ~/.local/share/jdtls --strip-components=1
    #      args:
    #        creates: ~/.local/share/jdtls

    # ------------------------------------------
    # C# (omnisharp)
    # ------------------------------------------
    #    - name: Install .NET SDK
    #      shell: |
    #        wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
    #        dpkg -i packages-microsoft-prod.deb
    #        apt update
    #        apt install -y dotnet-sdk-6.0
    #      args:
    #        creates: /usr/bin/dotnet
    #
    #    - name: Install OmniSharp
    #      shell: |
    #        mkdir -p ~/.local/share/omnisharp
    #        wget https://github.com/OmniSharp/omnisharp-roslyn/releases/latest/download/omnisharp-linux-x64-net6.0.tar.gz -O /tmp/omnisharp.tar.gz
    #        tar -xzf /tmp/omnisharp.tar.gz -C ~/.local/share/omnisharp
    #      args:
    #        creates: ~/.local/share/omnisharp/OmniSharp.dll

    # ------------------------------------------
    # Go (gopls)
    # ------------------------------------------
    #    - name: Download and install Go
    #      shell: |
    #        curl -LO https://go.dev/dl/go1.21.1.linux-amd64.tar.gz
    #        tar -C /usr/local -xzf go1.21.1.linux-amd64.tar.gz
    #        echo 'export PATH=$PATH:/usr/local/go/bin' >> /etc/profile
    #        export PATH=$PATH:/usr/local/go/bin
    #      args:
    #        creates: /usr/local/go/bin/go
    #
    #    - name: Install Go LSP (gopls)
    #      shell: |
    #        go install golang.org/x/tools/gopls@v0.16.0
    #      environment:
    #        GOPATH: "{{ ansible_env.HOME }}/go"
    #        PATH: "/usr/local/go/bin:{{ ansible_env.HOME }}/go/bin:{{ ansible_env.PATH }}"
    #      args:
    #        executable: /bin/bash

    # ------------------------------------------
    # Zsh
    # ------------------------------------------
#    - name: Install zsh-autosuggestions
#      git:
#        repo: https://github.com/zsh-users/zsh-autosuggestions
#        dest: "{{ home_dir }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
#        version: master
#
#    - name: Install zsh-syntax-highlighting
#      git:
#        repo: https://github.com/zsh-users/zsh-syntax-highlighting
#        dest: "{{ home_dir }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
#        version: master
#
#    - name: Install you-should-use
#      git:
#        repo: https://github.com/MichaelAquilina/zsh-you-should-use.git
#        dest: "{{ home_dir }}/.oh-my-zsh/custom/plugins/you-should-use"
#        version: master
#
#    - name: Install zsh-bat
#      git:
#        repo: https://github.com/fdellwing/zsh-bat.git
#        dest: "{{ home_dir }}/.oh-my-zsh/custom/plugins/zsh-bat"
#        version: master
#
#    - name: Install Powerlevel10k theme
#      git:
#        repo: https://github.com/romkatv/powerlevel10k.git
#        dest: "{{ home_dir }}/.oh-my-zsh/custom/themes/powerlevel10k"
#        version: master
